/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode[] splitListToParts(ListNode head, int k) {
        ListNode[] result = new ListNode[k];
        int n = 0;
        ListNode cur = head;
        while (cur != null) {
            cur = cur.next;
            n++;
        }
        int part = n / k;
        int remaining = n % k;
        cur = head;
        ListNode prev = head;
        for (int i = 0; i < k; i++) {
            ListNode newpart = cur;

            int size = part;
            if (remaining > 0) {
                remaining--;
                size++;
            }

            int j = 0;
            while (j < size) {
                prev = cur;
                cur = cur.next;
                j++;
            }
            if (prev != null) {
                prev.next = null;
            }
            result[i] = newpart;
            ;
        }
        return result;
    }
}
